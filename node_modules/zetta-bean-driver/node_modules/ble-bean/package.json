{
  "name": "ble-bean",
  "version": "1.0.0",
  "description": "Lightblue Bean BLE Services",
  "main": "lib/bean.js",
  "directories": {
    "test": "test"
  },
  "dependencies": {
    "crc": "^2.1.1",
    "noble": "^0.3.1"
  },
  "devDependencies": {},
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/jacobrosenthal/ble-bean"
  },
  "keywords": [
    "ble",
    "bean",
    "punchthrough",
    "service",
    "noble"
  ],
  "author": {
    "name": "Jacob Rosenthal"
  },
  "license": "MIT",
  "readme": "##BLE-Bean\nNon Official api for the LightBlue Bean http://punchthrough.com/bean/\n\nble-bean is set up a litte differently than other BLE libraries. I'm playing with exposing services and characteristics, rather than the device. You need to use noble to search for services, and create an instance of Bean or Scratch. See the example.\n\n###INSTALL\n```\nnpm install ble-bean\n```\n\n\n####Bean:\n\nYou can wite data which can be read on arduino with Serial.read - in this instance 91,00,00 is firmata for all pins on port 0 low\n```\nconnectedBean.write(new Buffer([0x91,0x00,0x00]),callback(error));\n```\n\nYou can read the raw data from the device with:\n```\nconnectedBean.on(\"raw\", callback(data, length, valid, command));\n\n```\n\nOr theres a job specific emitters to do parsing for you, like serial:\n```\nconnectedBean.on(\"serial\", callback(data, valid));\n\n```\n\nOr accellerometer:\n```\nconnectedBean.on(\"accell\", callback(x, y, z, valid));\n```\n\nBut to read the accelerometer, you need to ask it to take a reading with:\n```\nconnectedBean.requestAccell(callback(error));\n```\n\nTemperature:\n```\nconnectedBean.on(\"temp\", callback(temp, valid));\n```\n\nBut to read the temp, you need to ask it to take a reading with:\n```\nconnectedBean.requestTemp(callback(error));\n```\n\nYou can set the led color (in this case to a random color) with:\n```\nconnectedBean.setColor(new Buffer([255,255,255]), callback(error));\n```\n\nIf theres something I haven implemented you can create it yourself with the send command. See commands.js for commandBuffers to use:\n```\nconnectedBean.send(commandBuffer, dataBuffer, callback(error));\n```\n\n\n####Scratch:\n\nScratch characteristics are 5 other characterists you can send and receive data on from the Arduino. See the reference page for more info: http://punchthrough.com/bean/arduino-reference/\n\nYou can write to the first scratch like:\n```\nconnectedScratch.write1(\"scratch1\", new Buffer([]), callback(error));\n```\n\nAnd you could listen for data on it like:\n```\nconnectedScratch.on(\"scratch1\", callback(data));\n```\n\n\n###CHANGELOG\n0.1.0 \nfirst\n\n0.2.0\ncleaned up scanning in the example and the package.json file\n\n0.3.0 and 0.4.0 \nadd scratch characteristics with notify \nfix acellerometer readings\nbetter logging in example, took console.log out of library\n\n0.5.0 \nscale acceleromter readings\nadded readme with changelog\n\n0.6.0\nonly emit command specific emits when packets are valid\nrefactor for cleaner code\nadd write scratch characteristics\n\n0.7.0\nadd write serial data to bean characteristic\n\n0.7.1\nBetter readme, no code changes.\n\n0.8.0\nNew Serial event for parsed serial data called 'serial'\n\n1.0.0\nEmitter callback signatures changed!! \n'read' emitter became 'raw'\naccell and serial changed removing the sequence since its handled internally now.\nAdded requestTemp.",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/jacobrosenthal/ble-bean/issues"
  },
  "homepage": "https://github.com/jacobrosenthal/ble-bean",
  "_id": "ble-bean@1.0.0",
  "_shasum": "f518cee0dd7cd40d30ebc79e8bf022a87c096e7c",
  "_from": "ble-bean@^1.0.0",
  "_resolved": "https://registry.npmjs.org/ble-bean/-/ble-bean-1.0.0.tgz"
}
